//
//  QuizViewController.swift
//  TheQuiz
//
//  Created by Jan Osmančík on 22.03.2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class QuizViewController: UIViewController, QuizDisplayLogic, UITableViewDataSource, UITableViewDelegate {
    var interactor: (any QuizBusinessLogic)?
    var router: (NSObjectProtocol & QuizRoutingLogic & QuizDataPassing)?
    
    lazy var nextButton: UIButton = UIButton(type: .system)
    lazy var label: UILabel = UILabel()
    lazy var answersTableView: UITableView = UITableView()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        initUI()
    }
    
    func reloadData() {
        label.text = interactor?.getQuestionText()
        answersTableView.reloadData()
    }
    
    func initUI() {
        view.addSubview(nextButton)
        view.addSubview(label)
        view.addSubview(answersTableView)
        
        navigationController?.navigationBar.prefersLargeTitles = false
        view.layer.cornerRadius = 8
        view.backgroundColor = .systemMint
        
        nextButton.setTitle("Submit", for: .normal)
        nextButton.addTarget(self, action: #selector(submitQuestionAction), for: .touchUpInside)
        nextButton.translatesAutoresizingMaskIntoConstraints = false
        nextButton.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 24).isActive = true
        nextButton.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        
        label.translatesAutoresizingMaskIntoConstraints = false
        label.text = interactor?.getQuestionText()
        label.topAnchor.constraint(equalTo: nextButton.bottomAnchor, constant: 24).isActive = true
        label.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 24).isActive = true
        label.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -24).isActive = true
        
        answersTableView.translatesAutoresizingMaskIntoConstraints = false
        answersTableView.isScrollEnabled = false
        answersTableView.backgroundColor = nil
        answersTableView.separatorStyle = .none
        answersTableView.delegate = self
        answersTableView.dataSource = self
        answersTableView.register(AnswerCell.self, forCellReuseIdentifier: AnswerCell.description())
        
        answersTableView.topAnchor.constraint(equalTo: label.bottomAnchor, constant: 8).isActive = true
        answersTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 24).isActive = true
        answersTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -24).isActive = true
        answersTableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -24).isActive = true
    }
    
    @objc func submitQuestionAction() {
        interactor?.checkAnswer()
    }

// MARK: - QuizDisplayLogic Extension

    private func setup(){
        let viewController = self
        let interactor = QuizInteractor()
        let presenter = QuizPresenter()
        let router = QuizRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    func displayLeaveAlert() {
        let alert = UIAlertController(title: "Leave Quiz", message: "No more questions. Are you sure to leave the quiz?", preferredStyle: .actionSheet)
        let evaluateAction = UIAlertAction(title: "Leave", style: .destructive) { _ in
            self.navigationController?.popToRootViewController(animated: true)
        }
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel)
        
        alert.addAction(evaluateAction)
        alert.addAction(cancelAction)
        
        self.present(alert, animated: true)
    }
    
    func diplayCorrectAnswer() {
        let alert = UIAlertController(title: "Wohoo", message: "Well done, your answer was correct!", preferredStyle: .actionSheet)
        
        let okAction = UIAlertAction(title: "Next question", style: .default) { _ in
            self.interactor?.goToNextQuestion()
        }
        
        alert.addAction(okAction)
        
        self.present(alert, animated: true)
    }
    
    func diplayIncorrectAnswer() {
        let alert = UIAlertController(title: "Damn", message: "Oh no, your answer was incorrect!", preferredStyle: .actionSheet)
        
        let tryAgainAction = UIAlertAction(title: "Try again", style: .cancel) { _ in
            alert.dismiss(animated: true)
        }
        
        let goNextAction = UIAlertAction(title: "Next question", style: .default) { _ in
            alert.dismiss(animated: true)
            self.interactor?.goToNextQuestion()
        }
        
        alert.addAction(tryAgainAction)
        alert.addAction(goNextAction)
        
        self.present(alert, animated: true)
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: false)
        interactor?.changeSelectionState(ofAnswer: indexPath.section)
        tableView.reloadData()
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return interactor?.getAnswersCount() ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard 
            let answer = interactor?.getAnswer(for: indexPath.section),
            let isMultipleAnswers = interactor?.getMultipleAnswersValue()
        else { return AnswerCell() }
        
        let cell = tableView.dequeueReusableCell(withIdentifier: AnswerCell.description(), for: indexPath) as? AnswerCell ?? AnswerCell()
        cell.isMultipleAnswers = isMultipleAnswers
        cell.text = answer.text
        cell.isChecked = answer.selected
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 4
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return UIView()
    }
}
